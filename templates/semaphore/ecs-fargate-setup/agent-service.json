{
  "Parameters": {
    "NetworkStack": {
      "Description": "Name of the stack that this stack references for networking and shared resources",
      "Type": "String"
    },
    "SemaphoreEndpoint": {
      "Type": "String",
      "Default": "clevertap.semaphoreci.com",
      "Description": "Semaphore organization endpoint"
    },
    "SemaphoreAgentScalerLambdaCodeS3Key": {
      "Type": "String",
      "Description": "Semaphore agent scaler lambda code s3 key"
    },
    "ContainerTag": {
      "Type": "String"
    },
    "Cpu": {
      "Type": "String"
    },
    "DesiredCapacity": {
      "Type": "String"
    },
    "MaximumPercent": {
      "Type": "String"
    },
    "MinimumHealthyPercent": {
      "Type": "String"
    },
    "MinTasks": {
      "Type": "String",
      "Default": "0"
    },
    "MaxTasks": {
      "Type": "String",
      "Default": "10"
    },
    "Memory": {
      "Type": "String",
      "Default": "0"
    }
  },
  "Resources": {
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/ecs/${AWS::StackName}"
        },
        "RetentionInDays": 7
      }
    },
    "SemaphoreAgentEcsTaskDefinitionIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "SemaphoreAgentEcsTaskDefinitionIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "SemaphoreAgentEcsTaskDefinitionIamPolicy"
            ]
          ]
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "AllowSecretsRetreiveValue",
              "Effect": "Allow",
              "Action": ["*"],
              "Resource": ["*"]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "SemaphoreAgentEcsTaskDefinitionIamRole"
          }
        ]
      }
    },
    "SemaphoreAgentEcsTaskDefinitionTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "RoleMappedToEcsTaskDefinitionTaskRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "SemaphoreAgentTaskDefinitionTaskPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "SemaphoreAgentEcsTaskDefinitionTaskPolicy"
            ]
          ]
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": ["*"],
              "Effect": "Allow",
              "Resource": ["*"],
              "Sid": "AllowRunCommandsToExecuteECSCommandsInFargate"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "SemaphoreAgentEcsTaskDefinitionTaskRole"
          }
        ]
      }
    },
    "SemaphoreAgentEcsTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "DockerLabels": {
              "stack": {
                "Ref": "AWS::StackName"
              }
            },
            "Environment": [
              {
                "Name": "STACK_PREFIX",
                "Value": {
                  "Ref": "NetworkStack"
                }
              },
              {
                "Name": "SEMAPHORE_ENDPOINT",
                "Value": {
                  "Ref": "SemaphoreEndpoint"
                }
              },
              {
                "Name":"AWS_REGION",
                "Value": {
                  "Ref": "AWS::Region"  
                }
              },
              {
                "Name":"ECS_SERVICE_NAME",
                "Value": {
                  "Ref":"AWS::StackName"
                }
              }
            ],
            "User":"semaphore",
            "Command": [
              "sh",
              "-c",
              "mkdir -p /opt/semaphore && cat > /opt/semaphore/semaphore-agent.yml << EOF\nendpoint: ${SEMAPHORE_ENDPOINT}\ntoken: ${SEMAPHORE_AGENT_TOKEN}\nshutdown-hook-path: /opt/semaphore/shutdown\ndisconnect-after-job: true\ndisconnect-after-idle-timeout: 30\nEOF\n/opt/semaphore/agent start --config-file /opt/semaphore/semaphore-agent.yml"
            ],
            "Essential": true,
            "Image": {
              "Fn::Sub":"yashprime07/semaphore-agent:latest"
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "LogGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "ecs"
              }
            },
            "MemoryReservation": 128,
            "Name": {
              "Ref": "AWS::StackName"
            },
            "Privileged": false,
            "PortMappings": [
              {
                "ContainerPort": 8080,
                "HostPort": 8080,
                "Protocol": "tcp"
              }
            ],
            "ReadonlyRootFilesystem": false,
            "Ulimits": [
              {
                "HardLimit": 900000,
                "Name": "nofile",
                "SoftLimit": 900000
              }
            ],
            "Secrets": [
              {
                "Name": "SEMAPHORE_AGENT_TOKEN",
                "ValueFrom": {
                  "Ref": "SemaphoreAgentTokenSecretsManagerSecret"
                }
              }
            ]
          }
        ],
        "Cpu": {
          "Ref": "Cpu"
        },
        "Memory": {
          "Ref": "Memory"
        },
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "SemaphoreAgentEcsTaskDefinitionIamRole",
            "Arn"
          ]
        },
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "SemaphoreAgentEcsTaskDefinitionTaskRole",
            "Arn"
          ]
        },
        "Family": {
          "Ref": "AWS::StackName"
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ]
      }
    },
    "SemaphoreAgentEcsService": {
      "Properties": {
        "Cluster": {
          "Fn::ImportValue": {
            "Fn::Join": [
              "-",
              [
                "Semaphore-Ecs-Agent",
                "SemaphoreAgentEcsClusterName"
              ]
            ]
          }
        },
        "DeploymentConfiguration": {
          "MaximumPercent": {
            "Ref": "MaximumPercent"
          },
          "MinimumHealthyPercent": {
            "Ref": "MinimumHealthyPercent"
          },
          "DeploymentCircuitBreaker": {
            "Enable":   true,
            "Rollback": true
          }
        },
        "DesiredCount": {
          "Ref": "DesiredCapacity"
        },
        "LaunchType": "FARGATE",
        "EnableExecuteCommand": true,
        "PropagateTags": "SERVICE",
        "Tags": [
          {
            "Key": "ct-aws:cloudformation:stack-name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::ImportValue": {
                  "Fn::Sub": "System-SecurityGroup-SemaphoreAgentEc2SecurityGroupId"
                }
              }
            ],
            "Subnets": [
                  {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${NetworkStack}-SemaphoreAgentEc2SubnetId"
                    }
                  }
                ]
          }
        },
        "ServiceName": {
          "Ref": "AWS::StackName"
        },
        "TaskDefinition": {
          "Ref": "SemaphoreAgentEcsTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "SemaphoreAgentAutoScalingIamRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Sid": "RoleMappedforContainerAutoscalingTarget"
            }
          ]
        },
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "SemaphoreAgentApplicationAutoScalingScalableTarget": {
      "Properties": {
        "MaxCapacity": {
          "Ref": "MaxTasks"
        },
        "MinCapacity": {
          "Ref": "MinTasks"
        },
        "ResourceId": {
          "Fn::Join": [
            "/",
            [
              "service",
              {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-",
                    [
                      "Semaphore-Ecs-Agent",
                      "SemaphoreAgentEcsClusterName"
                    ]
                  ]
                }
              },
              {
                "Fn::GetAtt": [
                  "SemaphoreAgentEcsService",
                  "Name"
                ]
              }
            ]
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "SemaphoreAgentAutoScalingIamRole",
            "Arn"
          ]
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "SemaphoreAgentConfigSsmParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Semaphore agent config",
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Config"
        },
        "Tier": "Standard",
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              "{",
              "\"endpoint\":\"",
              {
                "Ref": "SemaphoreEndpoint"
              },
              "\",",
              "\"agentTokenParameterName\":\"",
              {
                "Ref": "SemaphoreAgentRegistrationTokenSsmParameter"
              },
              "\",",
              "\"sshKeysParameterName\":\"",
              {
                "Fn::ImportValue": "Semaphore-GitHubSshKeyFingerprint-GithubPublicSshKeyFingerprintSSMParameterName"
              },
              "\",",
              "\"disconnectAfterJob\":\"true\",",
              "\"disconnectAfterIdleTimeout\":\"300\",",
              "\"envVars\":[",
              "\"SEMAPHORE_GIT_CACHE_AGE=86400\",",
              "\"SEMAPHORE_CACHE_BACKEND=s3\",",
              "\"SEMAPHORE_CACHE_S3_BUCKET=",
              {
                "Fn::ImportValue": "System-SharedResources-SemaphoreCachingS3BucketName"
              },
              "\",",
              "\"SEMAPHORE_CACHE_USE_EC2_INSTANCE_PROFILE=true\"",
              "],",
              "\"usePreSignedURL\":false",
              "}"
            ]
          ]
        }
      }
    },
    "SemaphoreAgentScalerLambdaIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "SemaphoreAgentScalerLambdaIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": ["*"],
              "Effect": "Allow",
              "Resource": ["*"]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}-SemaphoreAgentScalerLambdaIamPolicy"
        },
        "Roles": [
          {
            "Ref": "SemaphoreAgentScalerLambdaIamRole"
          }
        ]
      }
    },
    "SemaphoreAgentScalerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::ImportValue": "cfstack-Init-SourceS3BucketName"
          },
          "S3Key": {
            "Ref": "SemaphoreAgentScalerLambdaCodeS3Key"
          }
        },
        "Description": "Dynamically scale Semaphore agents based on jobs demand",
        "Environment": {
          "Variables": {
            "SEMAPHORE_AGENT_TOKEN_PARAMETER_NAME": {
              "Ref": "SemaphoreAgentRegistrationTokenSsmParameter"
            },
            "SEMAPHORE_AGENT_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "SEMAPHORE_ENDPOINT": {
              "Ref": "SemaphoreEndpoint"
            },
            "ECS_CLUSTER_NAME":{
              "Fn::ImportValue": {
                "Fn::Join": [
                  "-",
                  [
                    "Semaphore-Ecs-Agent",
                    "SemaphoreAgentEcsClusterName"
                  ]
                ]
              }
            },
            "ECS_SERVICE_NAME": {
              "Fn::GetAtt": [
                "SemaphoreAgentEcsService",
                "Name"
              ]
            },
            "SEMAPHORE_AGENT_OVERPROVISION_STRATEGY": "none",
            "SEMAPHORE_AGENT_OVERPROVISION_FACTOR": "0"
          }
        },
        "Handler": "app.handler",
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "SemaphoreAgentScalerLambdaIamRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 60,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::ImportValue": "System-SecurityGroup-SemaphoreAgentScalerLambdaEc2SecurityGroupId"
            }
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": {
                "Fn::Sub": "${NetworkStack}-SemaphoreAgentEc2SubnetId"
              }
            }
          ]
        }
      }
    },
    "SemaphoreAgentScalerLambdaFunctionLogRetention": {
      "Type": "Custom::LogRetention",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": "CloudWatchLogRetention-CustomResource-LogRetentionLambdaFunctionArn"
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "SemaphoreAgentScalerLambdaFunction"
              }
            ]
          ]
        },
        "RetentionInDays": 30
      }
    },
    "SemaphoreAgentScalerLambdaEventInvokeConfig": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "SemaphoreAgentScalerLambdaFunction"
        },
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0,
        "Qualifier": "$LATEST"
      }
    },
    "SemaphoreAgentScalerEventsRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Rule to dynamically invoke lambda function to scale Semaphore agent asg",
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SemaphoreAgentScalerLambdaFunction",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      }
    },
    "SemaphoreAgentScalerEventsRuleLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SemaphoreAgentScalerLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SemaphoreAgentScalerEventsRule",
            "Arn"
          ]
        }
      }
    },
    "SemaphoreAgentRegistrationTokenSsmParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Semaphore agent registration token",
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Agent-Registration-Token"
        },
        "Tier": "Standard",
        "Type": "String",
        "Value": "replace_me"
      }
    },
    "SemaphoreAgentTokenSecretsManagerSecret":{
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SemaphoreAgentToken"
        },
        "Description": "Semaphore Agent Registration Token",
        "SecretString": "repalce_me"
      }
    }
  }
}
