{
  "Parameters": {
    "NetworkStack": {
      "Description": "Name of the stack that this stack references for networking",
      "Type": "String"
    },
    "EnableArm64Ec2Instance": {
      "Description": "Enables or disables arm64 remote docker host",
      "Default": "false",
      "Type": "String"
    },
    "Arm64Ec2ImageId": {
      "Description": "Arm64 remote docker host image id",
      "Type": "String"
    },
    "Arm64Ec2InstanceType": {
      "Description": "Arm64 remote docker host instance type",
      "Type": "String"
    }
  },
  "Conditions": {
    "IsArm64Ec2InstanceEnabled": {
      "Fn::Equals": [
        {
          "Ref": "EnableArm64Ec2Instance"
        },
        "true"
      ]
    }
  },
  "Resources": {
    "Ec2InstanceIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "Ec2InstanceIamRole"
            ]
          ]
        }
      }
    },
    "Ec2InstanceIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "Ec2InstanceIamPolicy"
            ]
          ]
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "AllowInteractionWithEcsCluster",
              "Effect": "Allow",
              "Action": [
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowEcrRegistryPushAccess",
              "Effect": "Allow",
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload",
                "ecr:GetAuthorizationToken",
                "ecr:GetRepositoryPolicy",
                "ecr:DescribeRepositories",
                "ecr:ListImages"
              ],
              "Resource": "*"
            },
            {
              "Sid": "WriteLogsToCloudWatchLogs",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowSSMAgentToFunction",
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:GetManifest",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowSsmAgentToCommunicateWithSystemsManagerApiService",
              "Effect": "Allow",
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowSsmManagerToBeAbleToDescribeInstanceStatus",
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstanceStatus"
              ],
              "Resource": "*"
            },
            {
              "Sid": "",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowSsmAgentToPutLogsToS3",
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads"
              ],
              "Resource": [
                {
                  "Fn::ImportValue": "System-SharedResources-SsmS3BucketArn"
                },
                {
                  "Fn::Join": [
                    "/",
                    [
                      {
                        "Fn::ImportValue": "System-SharedResources-SsmS3BucketArn"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "AllowSSMAgentToGetKMSGeneratedDataKeyWhenAccessingS3Bucket",
              "Effect": "Allow",
              "Action": [
                "kms:GenerateDataKey",
                "kms:Decrypt"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowTwoWayWebsocketChannelComminicationBetweenTheClientBrowserOrCliAndRemoteManagedInstance",
              "Effect": "Allow",
              "Action": [
                "ssmmessages:*",
                "ssm:UpdateInstanceInformation"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowSsmAccessToCloudWatchLogGroup",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowSsmToGetS3EncryptionConfiguration",
              "Effect": "Allow",
              "Action": [
                "s3:GetEncryptionConfiguration"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowBootstrapViaCloudInitToBeAbleToDescribeTags",
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeTags"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Ec2InstanceIamRole"
          }
        ]
      }
    },
    "Ec2InstanceIamProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "Ec2InstanceIamRole"
          }
        ]
      }
    },
    "Arm64Ec2Instance": {
      "Condition": "IsArm64Ec2InstanceEnabled",
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": "256",
              "VolumeType": "gp3"
            }
          }
        ],
        "DisableApiTermination": false,
        "IamInstanceProfile": {
          "Ref": "Ec2InstanceIamProfile"
        },
        "ImageId": {
          "Ref": "Arm64Ec2ImageId"
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": {
          "Ref": "Arm64Ec2InstanceType"
        },
        "Monitoring": true,
        "PrivateIpAddress": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::ImportValue": {
                  "Fn::Sub": "${NetworkStack}-VpcNetworkPrefix"
                }
              },
              "7.10"
            ]
          ]
        },
        "SecurityGroupIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "System-SecurityGroup-RemoteDockerHostEc2SecurityGroupId"
            }
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStack}-RemoteDockerHostEc2SubnetId"
          }
        },
        "Tags": [
          {
            "Key": "customer",
            "Value": "clevertap"
          },
          {
            "Key": "role",
            "Value": "docker"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe",
                "systemctl stop ecs"
              ]
            ]
          }
        }
      }
    },
    "Arm64Ec2InstanceCleanupSsmDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "2.2",
          "description": "Document to cleanup docker images",
          "parameters": {
          },
          "mainSteps": [
            {
              "inputs": {
                "runCommand": [
                  "#!/bin/bash\n",
                  "set -euxo pipefail\n",
                  "docker system prune -f\n",
                  "for i in $(docker images -q); do\n",
                      "docker rmi --force $i 2>/dev/null || true\n",
                  "done"
                ]
              },
              "name": "ExecutingCleanupScript",
              "action": "aws:runShellScript",
              "onFailure": "Abort"
            }
          ]
        },
        "DocumentType": "Command"
      }
    },
    "Arm64Ec2InstanceCleanupSsmMaintenanceWindow": {
      "Type": "AWS::SSM::MaintenanceWindow",
      "Properties":{
        "Name": "Arm64Ec2InstanceCleanupSsmMaintenanceWindow",
        "Schedule": "cron(0 0 2 ? * *)",
        "Duration": 2,
        "Cutoff": 1,
        "AllowUnassociatedTargets": false
      }
    },
    "Arm64Ec2InstanceCleanupSsmMaintenanceWindowTarget":{
      "Type" : "AWS::SSM::MaintenanceWindowTarget",
      "Properties" : {
        "ResourceType" : "INSTANCE",
        "Targets" : [
          {
            "Key" : "tag:aws:cloudformation:logical-id",
            "Values" : [ "Arm64Ec2Instance" ]
          }
        ],
        "WindowId" : {
          "Ref" : "Arm64Ec2InstanceCleanupSsmMaintenanceWindow"
        }
      }
    },
    "Arm64Ec2InstanceCleanupSsmMaintenanceWindowTask" : {
      "Type" : "AWS::SSM::MaintenanceWindowTask",
      "Properties" : {
        "Priority" : 1,
        "TaskType" : "RUN_COMMAND",
        "MaxConcurrency":"1",
        "MaxErrors":"1",
        "TaskArn" : {
          "Ref": "Arm64Ec2InstanceCleanupSsmDocument"
        },
        "WindowId" : {
          "Ref" : "Arm64Ec2InstanceCleanupSsmMaintenanceWindow"
        },
        "Targets" : [
          {
            "Key":"WindowTargetIds",
            "Values":[
              {
                "Ref" : "Arm64Ec2InstanceCleanupSsmMaintenanceWindowTarget"
              }
            ]
          }
        ]
      }
    }
  }
}
